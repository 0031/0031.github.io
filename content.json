[{"title":"Linux下如何修改时区","date":"2016-12-28T08:27:55.000Z","path":"2016/12/28/linux-tzselect/","text":"上次有一篇文章写到了时区的修改，本应把这篇文章融在那里面，但是感觉好像代码又有点多，突出不了那篇文章的主题（是想突出Java中如何修改时区），因此把它移到这里来，做个小结。 键入 date -R ，查看时区：12[root@user ~]# date -RWed, 28 Dec 2016 08:48:12 +0000 可以看到这是0时区，才8点多，我所在的位置实际上已经16点多了。 键入 tzselect ，选择时区&emsp;这里我们选择Asia（亚洲）：123456789101112131415[root@user ~]# tzselectPlease identify a location so that time zone rules can be set correctly.Please select a continent or ocean. 1) Africa 2) Americas 3) Antarctica 4) Arctic Ocean 5) Asia 6) Atlantic Ocean 7) Australia 8) Europe 9) Indian Ocean10) Pacific Ocean11) none - I want to specify the time zone using the Posix TZ format.#? 5 &emsp;然后选择China（中国）：12345678910111213141516171819Please select a country. 1) Afghanistan 18) Israel 35) Palestine 2) Armenia 19) Japan 36) Philippines 3) Azerbaijan 20) Jordan 37) Qatar 4) Bahrain 21) Kazakhstan 38) Russia 5) Bangladesh 22) Korea (North) 39) Saudi Arabia 6) Bhutan 23) Korea (South) 40) Singapore 7) Brunei 24) Kuwait 41) Sri Lanka 8) Cambodia 25) Kyrgyzstan 42) Syria 9) China 26) Laos 43) Taiwan10) Cyprus 27) Lebanon 44) Tajikistan11) East Timor 28) Macau 45) Thailand12) Georgia 29) Malaysia 46) Turkmenistan13) Hong Kong 30) Mongolia 47) United Arab Emirates14) India 31) Myanmar (Burma) 48) Uzbekistan15) Indonesia 32) Nepal 49) Vietnam16) Iran 33) Oman 50) Yemen17) Iraq 34) Pakistan#? 9 &emsp;选择北京时间：1234Please select one of the following time zone regions.1) Beijing Time2) Xinjiang Time#? 1 &emsp;确认当期时间是否正确（这是掏出你的手表看下对不对O(∩_∩)~）：12345678910The following information has been given: China Beijing TimeTherefore TZ='Asia/Shanghai' will be used.Local time is now: Wed 28 Dec 17:08:05 CST 2016.Universal Time is now: Wed 28 Dec 09:08:05 UTC 2016.Is the above information OK?1) Yes2) No#? 1 &emsp;系统给了一个修改时区的命令：123456You can make this change permanent for yourself by appending the line TZ='Asia/Shanghai'; export TZto the file '.profile' in your home directory; then log out and log in again.Here is that TZ value again, this time on standard output so that youcan use the /usr/bin/tzselect command in shell scripts:Asia/Shanghai &emsp;复制其中的 TZ=’Asia/Shanghai’; export TZ ，并执行：1[root@user ~]# TZ='Asia/Shanghai'; export TZ &emsp;键入 键入 tzselect ，再次查看时间，则为东八区了：12[root@user ~]# date -RWed, 28 Dec 2016 17:10:16 +0800 当然，除了tzselect命令，还有其他一些修改时区的方法，就不在这里一一介绍了。","tags":[{"name":"Linux","slug":"Linux","permalink":"/tags/Linux/"},{"name":"Shell","slug":"Shell","permalink":"/tags/Shell/"},{"name":"OS","slug":"OS","permalink":"/tags/OS/"}]},{"title":"图片压缩以加快网站访问速度","date":"2016-12-25T14:09:18.000Z","path":"2016/12/25/image-compression/","text":"语文功底不好的我，绞尽脑汁写了几篇文章发布到服务器上，由于这其中包含了不少图片，测试访问速度并不理想，体验很差。虽然Hexo已经将网站转为静态页面了，性能提升很多，但毕竟用的github空间，不花钱，已经算是很不错的了。因此，只能先从图片上下功夫，至于js和css暂时不管。 网上找了很多优化方法，最终决定将图片资源托管至七牛CDN，不过据说后期图片多了会依赖它，然后慢慢你的钱包就分了一部分给它，我想七牛做得好才会由用户依赖吧（这里没有要给七牛做广告的意思），另外现在对我的博客来说还不到后期，将来的事情谁又知道呢~ 确定好方案，那就开整吧。 开通七牛CDN服务完成下列步骤即可： 注册七牛云账号 实名认证 新建对象存储 &emsp;&emsp;官网存储快速入门文档。 绑定加速域名 &emsp;&emsp;官网融合CDN加速快速入门文档。 完成上述步骤再通过下面的工具将本地文件上传即可使用。 自动同步插件首先根据网友推荐使用了一款插件：hexo-qiniu-sync。按照插件作者的描述，通过配置七牛的密钥，资源文件夹路径，然后在文章中插入特定标签，生成静态文件时，即可自动同步图片到七牛服务器。 看起来貌似很方便，而且也有不少人使用，到我手里就变了样。按照文档安装后并且配置七牛密钥后，运行这个插件时报错，导致不仅无法上传图片，而且本地预览文章都不行。 我也到讨论区看了，有同样的错误，但是作者没有在线，据说是忙于搬家大业。多次尝试无果，只好摒弃这个好用的插件（如果能用的朋友，请在评论区留言）。 手动同步工具来到七牛官网，找到了一个文件上传工具：qshell。经过一番倒腾，终于把图片文件夹弄到七牛服务器上了，详细操作步骤请看文档：qshell使用。只不过每次有文件变动，需要手动执行命令，有点不太方便。 以上方式治标不治本，虽然速度能够提升，但非常有限。 图片压缩围绕图片做优化，怎么能忘记它本身，如果有一张1000M的图片，就算使用CDN能提高多少速度，所以只有图片大小相对较小，才能更好的提升速度。 这里的相对较小，并不是能将1000M的图片变到1M，而是在同等宽高、画质差别不大的情况下进行图片压缩处理，使图片占用空间相较原图更小。 图片格式 &emsp;&emsp;读者可以了解下图片格式，并且选择某种格式来作为网站基准。当然，我推荐尽量使用JPEG(Joint Photographic Expert Group)，联合照片专家组，文件后缀名为“.jpg”或“.jpeg”，因为它是目前网络上最流行的图像格式，并且可以把文件压缩到最小，画质还不会收到太大的影响。 在线压缩工具 &emsp;&emsp;首先想到的就是利用在线压缩工具，我尝试把一张300K的jpg图片压缩，结果得到的图片只有20K，画质不会太差，这让我非常满意，于是继续压缩其他图片文件，最后整个3M的图片文件夹被我变成了400K左右，然后生成静态页面，发布到服务器。果然，访问速度得到大大改善。Tips：图片色彩差别最好不要太大，可以使用调色工具优化，否则压缩结果不会让你高兴。 图片压缩软件 &emsp;&emsp;如果图片太多，可以使用智图进行批量压缩，非常方便，安装完毕后，直接将图片文件夹拖入软件中，即时压缩，并且可以自定义压缩比例。 图片格式转码 &emsp;&emsp;直接修改后缀名？No,No,No！因为这样并没有真正修改格式，并且智图也不支持压缩这种类型的图片，那如何批量修改图片的后缀？推荐使用美图秀秀批处理（可能需要先安装美图秀秀），和智图一样直接拖放。在软件右侧选择更多-&gt;选择jpg格式-&gt;修改画质（建议60%-80%）： 当然，你还可以用它添加水印，做做美化什么的，更多功能需要自己去发现~ 最后压缩完图片后，结合CDN存储方式，整个网站访问起来就更快了，把js、css也一并放到CDN下也能提升速度，方法就不多说了。如果您有更好的优化方法，请在评论区留言！","tags":[{"name":"CDN","slug":"CDN","permalink":"/tags/CDN/"},{"name":"Server","slug":"Server","permalink":"/tags/Server/"},{"name":"网站优化","slug":"网站优化","permalink":"/tags/网站优化/"},{"name":"图片压缩","slug":"图片压缩","permalink":"/tags/图片压缩/"}]},{"title":"时间在不同操作系统下不一致","date":"2016-12-25T02:53:17.000Z","path":"2016/12/25/time-not-consistent/","text":"时间不一致，是由于时区设置不统一，这个问题并不是所有开发者都能遇到，开发与生产环境都在同类型操作系统下，比如C#，均用Windows系统，就不用担心。 之前，我在博客上发布文章时，遇到了这个问题，发布文章时，本地时间15点多，而服务器上显示7点多，开始以为程序在时间戳上的转换可能有逻辑错误，通过打断点调试，并没有发现任何错误，然后又重新导出war包，放在服务器上，再次发布新的文章，可是问题依然没有得到解决。 于是只能求助于网络，了解了其中的原因。要解决该问题，首先需要了解几个东西： 格林威治标准时间（GMT）十七世纪，英国为了海上霸权的扩张计划，格林威治皇家天文台进行天体观测，1884年，决定通过格林威治的子午线作为划分地球东西两半球的经度零度。旧皇家观测所门口墙上有一个时钟，显示当下时间，这个时间就是世界时间参考点，这就是格林威治标准时间（Greenwich Mean Time）的由来。 世界协调时间（UTC）Coordinated Universal Time【为什么缩写是UTC，挠头(⊙o⊙)?】是经过平均太阳时（以GMT为准）、地轴运动修正后的新时标以及以秒为单位的国际原子时所综合精算而成的时间，计算过程相当严谨精密，因此UTC比GMT更加精准。 站在一个软件开发者角度来说，GMT =&gt; 时间标准1.0，UTC =&gt; 时间标准2.0，都可以用，只是对某些要求更高的人来说后者更适用。 东八区（GMT+8/UTC+8）在那个年代，中国海事比不上发达国家，因此只能沿用世界标准，由于地理位置因素，北京时间大约快了8个小时，因此东八区诞生了，本来全中国横跨多个时区，比如新疆时钟指向8点时，其实只有4点多，但为了全国标准一致，均使用北京时间，特别行政区除外。当然，我们在程序中看到的应该是 CST：中国标准时间（China Standard Time） 找到“病根”，对症“下药”！ 修改操作系统属性Linux： 由于代码篇幅比较大，请移步至Linux下如何修改时区。 Windows： 直接在桌面右下角找到时间的位置，然后选择日期和时间，弹出窗口中找到时区的更改即可，由于Windows不同版本界面不尽相同，所以不在此截图演示。 Mac： 穷屌买不起，无法做出任何说明。 修改程序代码（以Java示例）其实这才是本文重点，直接在程序代码中控制时区转换即可，一次付出，终身受益。方法也很简单，可以写一个关于时间的Util工具类：12345678910111213141516171819202122232425262728293031323334353637import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.TimeZone;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class TimeUtils &#123; // 日志，可以在调试过程中快速定位错误位置 protected static final Log log = LogFactory.getLog(TimeUtils.class); // 配置一个默认时区，当然也可以写入至xml文件中 public static final String TIME_ZOME = \"Asia/Shanghai\"; // 如果用到Calendar 可以这样修改时区 private static Calendar cal = Calendar.getInstance(); static &#123; cal.setTimeZone(TimeZone.getTimeZone(TIME_ZOME)); &#125; /** * 根据固定格式转换 * @param date 日期 * @param format 日期格式 如yyyy-MM-dd HH:mm:ss * @return */ public static String simpleDateFormat(Date date,String format)&#123; try &#123; SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format); // 如果用SimpleDateFormat这样修改时区 simpleDateFormat.setTimeZone(TimeZone.getTimeZone(TIME_ZOME)); return simpleDateFormat.format(date); &#125; catch (Exception e) &#123; log.debug(\"日期格式化出错: \" + e.getMessage()); &#125; return null; &#125; /** 其他函数不在此贴出 **/&#125; 如此修改后，在今后的代码编写中不用在担心时区不统一的问题了。","tags":[{"name":"OS","slug":"OS","permalink":"/tags/OS/"},{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"Timezone","slug":"Timezone","permalink":"/tags/Timezone/"}]},{"title":"乱码，这个让人头疼而又必须解决的问题","date":"2016-12-23T08:23:22.000Z","path":"2016/12/23/messy-code/","text":"在我最开始接触实际网站系统开发的时候，经常遇到文本乱码，并且始终没有解决完善，或许当时开发经验不够，没能做到面面俱到。这个问题确实非常让人头疼，如果不去完全解决它，将会影响后面的开发。 乱码类型&emsp;&emsp;常见的乱码，一般能够分成五种类型：第一类是文本/文档文档乱码，这一般是由于源文档编码，和Windows使用的编码不通用造成的；第二类是网页乱码，形成原因和第一类乱码类似；第三类是Windows系统界面乱码，即中文Windows的菜单、桌面、提示框等显示乱码，主要是Windows注册表中有关字体的部分配置不当引起的；第四类是应用程式的界面乱码，即各种应用程式（包括游戏）本来显示中文的地方出现乱码，形成原因比较复杂，有第二类的乱码原因，也可能是软件用到的中文链接库，被英文链接库覆盖造成的；第五类是邮件乱码，形成原因也极其复杂。 如何解决(以Java Web开发场景为基础) 开发工具：Eclipse 服务器：Tomcat 目标编码：UTF-8 统一Eclipse编码格式 修改Workspace编码格式&emsp;&emsp;在Eclipse菜单栏中，选择Windows-&gt;Perferences-&gt;General-&gt;Workspace，在右侧找到Text file encoding修改为UTF-8： 修改Workspace编码格式 图解 修改Project编码格式&emsp;&emsp;选择某个项目，单击右键，选择Properties-&gt;Resource，在右侧找到Text file encoding修改为UTF-8： 修改Project编码格式 图解 修改Content-Type&emsp;&emsp;在Eclipse菜单栏中，选择Windows-&gt;Perferences-&gt;General-&gt;Content-Type，在右侧找到Text-&gt;Java Source File(如果有使用到JSP文件可以找到Jsp)更新为UTF-8，切记一定要点击右边的Update： 修改Content-Type 图解 当然，为了所有文件都统一，可以全部更新，毕竟有些文件类型用不到 修改单个文件编码格式&emsp;&emsp;与Project类似，只是选择单个文件，这里就不截图了。 其实经过上述操作，基本上已经算编码统一了，写代码时不用担心出现乱码问题，但是，将项目发布至服务器上时，只要遇到POST请求，返回中文数据，依然出现乱码。那么此时就需要修改Tomcat配置文件中的编码才能解决这个问题。 修改Tomcat配置文件 调试时&emsp;&emsp;使用Eclipse有个好处，调试项目很容易，一键发布，因此解决乱码只需在Project Explorer找到Servers-&gt;server.xml（需要搭建好Tomcat环境），找到：1&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /&gt; 修改为：1&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" URIEncoding=\"UTF-8\" /&gt; 项目正式发布时&emsp;&emsp;需要找到Tomcat安装目录下conf/server.xml，当然，修改位置不变。 最后&emsp;&emsp;上述步骤操作完成后，乱码问题将不会再出现，如果本文没有帮你解决问题或者文章有错误的地方，请在评论区留言。","tags":[{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"Tomcat","slug":"Tomcat","permalink":"/tags/Tomcat/"},{"name":"Eclipse","slug":"Eclipse","permalink":"/tags/Eclipse/"},{"name":"Web","slug":"Web","permalink":"/tags/Web/"}]},{"title":"遇见Hexo   ——   强大的静态博客框架","date":"2016-12-22T06:06:11.000Z","path":"2016/12/22/meet-hexo/","text":"之前写过一款Java博客，经验不足，没有及时做好数据库备份，导致服务器到期时，所有文章数据丢失。另外，由于是自己开发的博客，系统存在很多不足，因此经常混迹于各大技术论坛找材料修轮子。 一次偶然的机会，在GitHub上发现了Hexo，被它深深吸引。 如果在一两年前，或许我是不会用它的。每个程序猿都有一个独立创作的心，自己能做的，坚决不用别人的。当然，并不能完全否定这种开发方式，创新往往需要好的思路与独立实践。不过，对于初学者来说，开发能力尚有欠缺，往往做出来的东西，很多时候别人已经做过，并且做得比你好，那么那就是“重复造轮子”，也就成了初学者的一大痛点。 这里不再过多描述“重复造轮子”，来看下别人的“好轮子”：Hexo。 官网介绍 A fast, simple &amp; powerful blog framework. 快速、简洁且高效的博客框架。 确实如此，相比于“我造的轮子”好用多了。开发方式与开发语言也和我现在的开发方式不同，这对我来说是一次新的尝试。 使用感受几行代码即可轻松搭建好一个简易的博客，再修改下配置文件，做下个性化定制，属于自己的博客就生成了。至于搭建教程嘛，就不在这里说了，官方文档有说明，Google也可以看到很多。 框架内部自动进行渲染，生成文章静态页面，在本地即可预览效果。 文章使用MarkDown标记，非常易用，语法简单，个人感觉用起来非常爽，只不过和传统的博客使用在线编辑器来讲，可能体验稍差点，如果是没有开发基础的人员来用，比较吃力一些，加个后台管理页面会更好。 支持更换皮肤，这点也非常实用，可以自定义皮肤，Github上也有很多开源主题，当前博客就是使用的Yilia的主题，非常不错，不知屏幕前的您觉得如何呢？如果觉得不错就给大神一点支持吧(～￣▽￣)～ 代码托管至Github，再也不用担心服务器到期什么的弱爆了的问题。 最后废话几句希望那些正在“重复造轮子”的同学多逛逛技术论坛，发现一些好轮子，做做对比，才能知道自己的轮子存在哪些不足，然后做相应的修(创)补(新)，才能走得更远。 做的每一份努力，只为发现程序之美~","tags":[{"name":"Blog","slug":"Blog","permalink":"/tags/Blog/"},{"name":"发现","slug":"发现","permalink":"/tags/发现/"}]}]